[Config DCTCP_ECMP]

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = true}
**.use_power_of_n_lb = ${usingPowerOfNLB = false}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "DCTcp"
**.tcp.ecnWillingness = ${ecnWill = true}

**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = false}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
**.ipv4.ip.delta = ${markingTimer = 0.00120}s
**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = false}
**.ipv4.ip.omega = ${orderingTimer = 0.00120}s

#**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 9}
**.num_servers = ${numServers = 16}
**.num_bursty_apps = ${numBurstyApps = 0}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 40}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].replyLength = ${incastFlowSize = 20000}B
**.server[*].app[1..].requestLength = 1750000B
**.server[*].app[1..].activeClient = false
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 19.75}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.5}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "/home/prasopou/Documents/PhD/R2P2-CC/nwsim/other_simulators/OMNET/vertigo_simulations/Omnet_Sims/dc_simulations/simulations/Vertigo_Sims/" # TODO: Temporary

**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFO"}
**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
**.agg[*].eth[*].mac.queue.dropper_type = ${aggDropperType = "FIFO"}
**.agg[*].eth[*].mac.queue.scheduler_type = ${aggSchedulerType = "FIFO"}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
**.spine[*].eth[*].mac.queue.dropper_type = ${spineDropperType = $aggDropperType}
**.spine[*].eth[*].mac.queue.scheduler_type = ${spineSchedulerType = $aggSchedulerType}

**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = false}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false


**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}

[Config Swift_ECMP]

**.ipv4.ip.timeToLive = ${ttl = 250}
**.tcp.close_instead_of_timewait = ${closeInsteadOfWait = true}
**.tcp.FRs_disabled = ${FRsDisabled = false}
**.useECMP = ${usingECMP = true}
**.use_power_of_n_lb = ${usingPowerOfNLB = false}
**.agg[*].random_power_factor = ${aggRandomPowerFactor = 2}
**.spine[*].random_power_factor = ${spineRandomPowerFactor = $aggRandomPowerFactor}
**.tcp.tcpAlgorithmClass = "Swift"

**.ipv4.ip.should_use_v2_marking = ${shouldUseV2Marking = false}
**.ipv4.ip.marking_type = ${markingType = "SRPT"}
**.ipv4.ip.delta = ${markingTimer = 0.00120}s
**.ipv4.ip.has_ordering_layer = ${hasOrderingLayer = false}
**.ipv4.ip.omega = ${orderingTimer = 0.00120}s

**.tcp.constant_endpoint_target_delay = ${constantEndpointTargetDelay = 100} # it's always 0 and setting this to 0 causes constant multiplicative decrease
**.tcp.endpoint_EWMA_factor = ${endpointEWMAFactor = 0.25}

#**.num_spines = ${numSpines = 4}
**.num_aggs = ${numAggs = 9}
**.num_servers = ${numServers = 16}
**.num_bursty_apps = ${numBurstyApps = 0}
**.server[*].app[1..].num_requests_per_burst = ${numReqPerBurst = 40}
**.num_mice_background_flow_apps_in_each_server = ${numMiceBackgroundFlowAppsInEachServer = 1}
**.num_elephant_background_flow_apps_in_each_server = ${numElephantBackgroundFlowAppsInEachServer = 0}

**.server[*].app[1..].replyLength = ${incastFlowSize = 20000}B
**.server[*].app[1..].requestLength = 250B
**.server[*].app[1..].activeClient = false
**.server[*].app[1..].application_category = ${serverApplicationCategory = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? "cache" : "web"}
**.server[*].app[1..].background_inter_arrival_time_multiplier = ${bgInterArrivalMultiplier = 19.75}
**.server[*].app[1..].background_flow_size_multiplier = ${bgFlowSizeMultiplier = 1}
**.server[*].app[1..].bursty_inter_arrival_time_multiplier = ${burstyInterArrivalMultiplier = 0.5}
**.server[*].app[1..].bursty_flow_size_multiplier = ${burstyFlowSizeMultiplier = 1}
**.server[*].app[1..].numRequestsToSend = 1
**.server[*].app[1..].distibutions_base_root = "/home/prasopou/Documents/PhD/R2P2-CC/nwsim/other_simulators/OMNET/vertigo_simulations/Omnet_Sims/dc_simulations/simulations/Vertigo_Sims/" # TODO: Temporary

**.agg[*].eth[*].mac.queue.typename = ${aggQueueType = "V2PIFO"}
**.agg[*].use_v2_pifo = ${aggUseV2Pifo = true}
**.agg[*].eth[*].mac.queue.dropper_type = ${aggDropperType = "FIFO"}
**.agg[*].eth[*].mac.queue.scheduler_type = ${aggSchedulerType = "FIFO"}

**.spine[*].eth[*].mac.queue.typename = ${spineQueueType = $aggQueueType}
**.spine[*].use_v2_pifo = ${spineUseV2Pifo = $aggUseV2Pifo}
**.spine[*].eth[*].mac.queue.dropper_type = ${spineDropperType = $aggDropperType}
**.spine[*].eth[*].mac.queue.scheduler_type = ${spineSchedulerType = $aggSchedulerType}

**.agg[*].eth[*].mac.typename = ${aggMacTypeName = "AugmentedEtherMac"}
**.spine[*].eth[*].mac.typename = ${spineMacTypeName = $aggMacTypeName}
**.agg[*].relayUnit.typename = ${aggRelayTypeName = "BouncingIeee8021dRelay"}
**.spine[*].relayUnit.typename = ${spineRelayTypeName = $aggRelayTypeName}

**.agg[*].bounce_randomly = ${aggBounceRandomly = false}
**.spine[*].bounce_randomly = ${spineBounceRandomly = $aggBounceRandomly}

**.agg[*].bounce_randomly_v2 = ${aggBounceRandomlyPowerOfN = false}
**.spine[*].bounce_randomly_v2 = ${spineBounceRandomlyPowerOfN = $aggBounceRandomlyPowerOfN}
**.agg[*].random_power_bounce_factor = ${aggBounceRandomlyPowerFactor = 2}
**.spine[*].random_power_bounce_factor = ${spineBounceRandomlyPowerFactor = $aggBounceRandomlyPowerFactor}

**.agg[*].denominator_for_retrasnmissions = ${aggDenomRet = 2}
**.spine[*].denominator_for_retrasnmissions = ${spineDenomRet = $aggDenomRet}

**.arp.typename = "GlobalArp"
**.agg[*].learn_mac_addresses = false
**.spine[*].learn_mac_addresses = false

**.server[*].numApps = ${server0NumApps = 1 + $numMiceBackgroundFlowAppsInEachServer + $numBurstyApps}
**.server[*].app[1..].is_bursty = ${server0IsBursty = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? false : true}
**.server[*].app[0].typename = "DCTcpGenericServerApp"
**.server[*].app[0].localPort = 80
**.server[*].app[1..].typename = "MultiSocketBasicClient"
**.server[*].app[1..].is_mice_background = ${serverIsMiceBackground = index() < 1 + $numMiceBackgroundFlowAppsInEachServer ? true : false}

########################################################################
[General]

record-eventlog = false # doesn't work, don't know why. https://groups.google.com/g/omnetpp/c/B23WizE3IPs  AND https://doc.omnetpp.org/omnetpp/api/group__Logging.html#ga287cddcb098a38db86a1f854156e8ab2 AND https://doc.omnetpp.org/omnetpp/manual/#cha:eventlog
check-signals = false
cmdenv-redirect-output = true

**.tcp.typename = "Tcp"
**.tcp.useCustomIW = true

**.app[*].dataTransferMode = "object"
**.tcp.delayedAcksEnabled = false
**.tcp.increasedIWEnabled = false
**.tcp.limitedTransmitEnabled = false
**.tcp.mss = 1452
**.tcp.nagleEnabled = true
**.tcp.recordStats = true
**.tcp.tcpAlgorithmClass = default
**.tcp.timestampSupport = true
# For adv window > 65KB
**.tcp.windowScalingSupport = true 

# maximum axvertisedwindow (1GB - init was 65KB. To support >100Gbps)
**.tcp.advertisedWindow = 1000000 

cmdenv-redirect-output = true

**.server[*].app[*].localAddress = ""
**.server[*].app[*].replyDelay = 0s

**.server[*].app[*].requestSentRequesterID.statistic-recording = true
**.server[*].app[*].requestReceivedRequesterID.statistic-recording = true
**.server[*].app[*].requestSource.statistic-recording = true
**.server[*].app[*].requestDuration.statistic-recording = true
**.server[*].app[0].requestSize.statistic-recording = true
**.server[*].app[1].senderRequestSize.statistic-recording = true
**.**.eth[*].mac.queue.queueLenBytesSampled.statistic-recording = true
**.**.eth[*].mac.queue.byteDepartures.statistic-recording = true

# "server" is type PortPaddingStandardHost (from base.ned) which is ApplicationLayerNodeBase TransportLayerNodeBase NetworkLayerNodeBase LinkLayerNodeBase
# LinkLayerNodeBase defines the "eth" submodule and the default type for it is EthernetInterface.
# EthernetInterface.ned has a "mac" submodule, the type of which is conditional on csmacdSupport (default false)
# In the false case, mac type is EtherMacFullDuplex
# EtherMacFullDuplex.ned has a "queue" submodule with default type "EtherQueue"
# module EtherQueue is defined in EtherQosQueue.ned and it extends DropTailQueue which extends PacketQueue which has all the models and stas
# to recap: EtherQueue->DropTailQueue->PacketQueue
# While: V2PIFO->PacketQueue. So, put sampling functionality in PacketQueue. Done
**.statistic-recording = false
